{'type': 'convolutional', 'batch_normalize': '1', 'filters': '32', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 3, 416, 416])
tensor([-0.2075, -0.1588, -0.1588, -0.1588, -0.1588])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '64', 'size': '3', 'stride': '2', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 32, 416, 416])
tensor([ 0.1382, -0.0140, -0.0140, -0.0129, -0.0173])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '32', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 64, 208, 208])
tensor([-0.1226, -0.0908, -0.0908, -0.0918, -0.0939])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '64', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 32, 208, 208])
tensor([-0.1227, -0.1741, -0.1027, -0.1067, -0.1028])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 64, 208, 208])
tensor([ 0.0155, -0.1881, -0.1168, -0.1197, -0.1201])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '3', 'stride': '2', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 64, 208, 208])
tensor([ 8.6217,  1.5599,  2.5102,  2.7943,  1.3162])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '64', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 104, 104])
tensor([ 0.3530, -0.0357, -0.1006, -0.1139, -0.1376])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 64, 104, 104])
tensor(1.00000e-02 *
       [-4.2599, -4.2596, -4.2596, -4.2596, -4.2597])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 128, 104, 104])
tensor([ 8.5791,  1.5173,  2.4676,  2.7517,  1.2736])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '64', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 104, 104])
tensor([ 6.5296,  1.2699,  1.8361,  1.5660,  0.3958])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 64, 104, 104])
tensor(1.00000e-02 *
       [-3.1027, -3.1347, -3.1173, -3.1112, -3.1201])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 128, 104, 104])
tensor([ 8.5481,  1.4859,  2.4364,  2.7206,  1.2424])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '2', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 104, 104])
tensor([-0.1227, -0.0818, -0.2638, -0.0038, -0.1004])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 2.0685,  1.5598,  0.7741,  2.3118,  1.0470])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor(1.00000e-02 *
       [-4.4867, -5.4678, -2.7009, -4.6562, -2.9701])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([-0.1676, -0.1365, -0.2908, -0.0504, -0.1301])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 2.5716,  3.7602,  2.1634,  2.1582,  2.6779])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0237, -0.0463,  0.4698,  0.0262,  0.3962])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([-0.1913, -0.1828,  0.1789, -0.0242,  0.2661])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([-0.3009, -0.3138, -0.4169, -0.1748, -0.1757])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0567, -0.1388,  0.9949, -0.0789, -0.0580])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([-0.2480, -0.3216,  1.1738, -0.1031,  0.2081])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.9090, -0.0839, -0.2791, -0.1814, -0.2507])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0644,  0.5218,  0.4325, -0.0904, -0.1463])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([-0.3124,  0.2001,  1.6064, -0.1935,  0.0619])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.9380,  1.2448, -0.0116,  1.0029,  0.5818])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([ 1.9671,  1.5740, -0.2055,  0.1963,  1.9264])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([ 1.6547,  1.7742,  1.4008,  0.0028,  1.9883])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([-0.1720, -0.3858, -0.2682, -0.2650, -0.2099])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([ 0.5198, -0.2768, -0.1959, -0.0898, -0.0485])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([ 2.1745,  1.4973,  1.2049, -0.0870,  1.9398])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 2.2430,  1.8123,  0.7938, -0.0024,  0.1815])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([ 0.3229, -0.3144, -0.0228, -0.1191, -0.1155])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([ 2.4974,  1.1829,  1.1821, -0.2061,  1.8243])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([-0.0653, -0.0202, -0.1333,  0.3436, -0.0523])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0455,  1.0451,  1.0861, -0.1717, -0.2237])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 256, 52, 52])
tensor([ 2.4519,  2.2281,  2.2682, -0.3777,  1.6006])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '2', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([-0.2206, -0.1622, -0.1374, -0.2303, -0.1450])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([-0.2341, -0.1379, -0.0950, -0.0653, -0.0767])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor(1.00000e-02 *
       [-4.8505, -4.8500, -4.8503, -4.8494, -4.8505])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.2691, -0.2107, -0.1859, -0.2788, -0.1935])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([-0.0825, -0.0060,  0.6741, -0.0874, -0.0384])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.0944,  0.1616,  0.0700, -0.0152, -0.0340])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.3634, -0.0491, -0.1159, -0.2940, -0.2275])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.3260, -0.0410,  0.4219, -0.0011,  0.0758])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor(1.00000e-02 *
       [-4.2332, -5.3698, -9.1049, -6.0657, -3.8983])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.4058, -0.1028, -0.2070, -0.3547, -0.2665])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([-0.1269, -0.1016, -0.0637, -0.1737, -0.2398])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.1417, -0.1347, -0.0045, -0.0594, -0.0419])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.5475, -0.2375, -0.2115, -0.4141, -0.3084])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 2.0982, -0.0100, -0.0183, -0.0114, -0.1295])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.1644,  0.3329, -0.1385, -0.1132,  0.0540])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.7119,  0.0953, -0.3500, -0.5273, -0.2543])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([-0.1782, -0.1359, -0.1347, -0.1453, -0.1208])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.1135, -0.0556, -0.1255, -0.0016,  0.1023])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.8254,  0.0397, -0.4754, -0.5289, -0.1520])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor(1.00000e-02 *
       [ 3.5238, -8.0556, -5.4894, -4.4248, -1.5190])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([ 0.1483,  0.7295, -0.0644, -0.0556, -0.0935])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.6771,  0.7692, -0.5399, -0.5845, -0.2455])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.0007, -0.0659, -0.0922, -0.1021, -0.1037])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.0374, -0.1682, -0.1093, -0.1084, -0.1036])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 512, 26, 26])
tensor([-0.7145,  0.6010, -0.6492, -0.6929, -0.3491])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '2', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([-0.1226, -0.0993, -0.0379, -0.1317, -0.0881])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 0.1176, -0.0352, -0.0343, -0.0292,  0.1305])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor(1.00000e-02 *
       [-3.0563, -3.0569, -3.0565, -3.0564, -3.0564])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.1532, -0.1299, -0.0685, -0.1623, -0.1186])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor(1.00000e-02 *
       [-2.9382,  3.9154, -2.0523, -3.4152, -5.6674])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([-0.0553,  0.2739, -0.0087,  0.3959,  0.5061])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.2085,  0.1440, -0.0772,  0.2336,  0.3875])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 1.1529, -0.0229,  0.0132,  0.1633,  0.3458])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor(1.00000e-02 *
       [-1.1155, -6.0469, -4.5406, -4.0460, -1.4661])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.2196,  0.0835, -0.1226,  0.1932,  0.3728])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([-0.0442, -0.0054, -0.0038,  0.2914,  0.4899])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([ 0.1443,  0.2220, -0.0084,  0.1063,  0.3386])

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.0753,  0.3055, -0.1310,  0.2995,  0.7114])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 1.3577,  0.2615, -0.0139, -0.0546,  0.1012])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([ 0.8185,  0.7630,  0.4067,  0.8101,  0.6118])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor(1.00000e-02 *
       [-2.4400, -0.5565, -3.8979, -2.3814, -3.7695])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([-0.0128,  0.0102,  0.3806,  0.3394,  0.2542])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 0.3413,  0.5672,  0.4440,  0.3221, -0.0366])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor(1.00000e-02 *
       [-2.8274, -6.4945, -7.8973, -6.4250,  6.0994])

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([-0.1218,  0.6642,  0.1046,  0.3621,  0.1511])

{'type': 'yolo', 'mask': '6,7,8', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 13, 13])
tensor([-0.1218,  0.6642,  0.1046])
tensor([-0.1218,  0.6642,  0.1046,  0.3621,  0.1511])

{'type': 'route', 'layers': ['-4']}
route
torch.Size([1, 255, 13, 13])
tensor([ 0.3413,  0.5672,  0.4440,  0.3221, -0.0366])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([-0.0532, -0.0667, -0.1264, -0.1825, -0.2272])

{'type': 'upsample', 'stride': '2'}
upsample
torch.Size([1, 256, 13, 13])
/home/wenyu/anaconda3/lib/python3.6/site-packages/torch/nn/functional.py:1749: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=Trueif the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
tensor([-0.0532, -0.0566, -0.0634, -0.0817, -0.1115])

{'type': 'route', 'layers': ['-1', '61']}
route
torch.Size([1, 256, 26, 26])
tensor([-0.0532, -0.0566, -0.0634, -0.0817, -0.1115])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 768, 26, 26])
tensor([ 0.1915, -0.0742, -0.0471,  1.2873,  0.3134])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor(1.00000e-02 *
       [-3.5376, -5.3169, -4.5264, -7.0819, -8.3475])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor(1.00000e-02 *
       [-1.0396, -1.4334, -2.3569, -3.9846, -1.4666])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([ 0.1195,  0.3842,  0.3654,  0.3150,  0.1836])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.4299,  0.3621,  0.5092,  0.5042,  0.2230])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([ 0.6397,  0.5498,  0.5853,  0.5851,  0.4566])

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.0574, -0.4729, -0.2064,  0.1496, -0.2337])

{'type': 'yolo', 'mask': '3,4,5', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 26, 26])
tensor([ 0.0574, -0.4729, -0.2064])
tensor([ 0.0574, -0.4729, -0.2064,  0.1496, -0.2337])

{'type': 'route', 'layers': ['-4']}
route
torch.Size([1, 255, 26, 26])
tensor([ 0.4299,  0.3621,  0.5092,  0.5042,  0.2230])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.0496, -0.1351, -0.0545, -0.0426, -0.0193])

{'type': 'upsample', 'stride': '2'}
upsample
torch.Size([1, 128, 26, 26])
tensor([-0.0496, -0.0710, -0.1138, -0.1150, -0.0747])

{'type': 'route', 'layers': ['-1', '36']}
route
torch.Size([1, 128, 52, 52])
tensor([-0.0496, -0.0710, -0.1138, -0.1150, -0.0747])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 384, 52, 52])
tensor([ 2.0454,  1.2711,  1.1086,  0.8861,  0.2810])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0140,  0.1139,  0.2230,  0.5950, -0.0201])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 1.4458,  1.3228,  1.6106,  0.6839,  0.9670])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.1329, -0.0954, -0.0842, -0.0300, -0.0437])

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.5276,  2.5411,  1.0610,  1.4222,  1.4939])

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([ 0.2639,  0.4000,  0.2070,  0.0122, -0.0060])

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.2003, -0.4013, -0.0601, -0.0245, -0.1759])

{'type': 'yolo', 'mask': '0,1,2', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 52, 52])
tensor([ 0.2003, -0.4013, -0.0601])
tensor([ 0.2003, -0.4013, -0.0601, -0.0245, -0.1759])


























{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.2085,  0.1440, -0.0772,  0.2336,  0.3875], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 1.1529, -0.0229,  0.0132,  0.1633,  0.3458], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor(1.00000e-02 *
       [-1.1154, -6.0469, -4.5406, -4.0460, -1.4661], device='cuda:0')

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.2196,  0.0835, -0.1226,  0.1932,  0.3728], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([-0.0442, -0.0054, -0.0038,  0.2914,  0.4899], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '1024', 'size': '3', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([ 0.1443,  0.2220, -0.0084,  0.1063,  0.3386], device='cuda:0')

{'type': 'shortcut', 'from': '-3', 'activation': 'linear'}
shortcut
torch.Size([1, 1024, 13, 13])
tensor([-0.0753,  0.3055, -0.1310,  0.2995,  0.7114], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 1.3577,  0.2615, -0.0139, -0.0546,  0.1012], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([ 0.8185,  0.7630,  0.4067,  0.8101,  0.6118], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor(1.00000e-02 *
       [-2.4400, -0.5565, -3.8979, -2.3814, -3.7695], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([-0.0128,  0.0102,  0.3806,  0.3394,  0.2542], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '512', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([ 0.3413,  0.5672,  0.4440,  0.3221, -0.0366], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '1024', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor(1.00000e-02 *
       [-2.8274, -6.4945, -7.8973, -6.4250,  6.0995], device='cuda:0')

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 1024, 13, 13])
tensor([-0.1218,  0.6642,  0.1046,  0.3621,  0.1511], device='cuda:0')

{'type': 'yolo', 'mask': '6,7,8', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 13, 13])

{'type': 'route', 'layers': '-4'}
route
torch.Size([1, 507, 85])
tensor([ 0.3413,  0.5672,  0.4440,  0.3221, -0.0366], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 13, 13])
tensor([-0.0532, -0.0667, -0.1264, -0.1825, -0.2272], device='cuda:0')

{'type': 'upsample', 'stride': '2'}
upsample
torch.Size([1, 256, 13, 13])
/home/wenyu/anaconda3/lib/python3.6/site-packages/torch/nn/functional.py:1749: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=Trueif the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
tensor([-0.0532, -0.0566, -0.0634, -0.0817, -0.1115], device='cuda:0')

{'type': 'route', 'layers': '-1, 61'}
route
torch.Size([1, 256, 26, 26])
tensor([-0.0532, -0.0566, -0.0634, -0.0817, -0.1115], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 768, 26, 26])
tensor([ 0.1915, -0.0742, -0.0471,  1.2873,  0.3134], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor(1.00000e-02 *
       [-3.5376, -5.3169, -4.5264, -7.0819, -8.3475], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor(1.00000e-02 *
       [-1.0396, -1.4334, -2.3569, -3.9846, -1.4666], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([ 0.1195,  0.3842,  0.3654,  0.3150,  0.1836], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '256', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.4299,  0.3621,  0.5092,  0.5042,  0.2230], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '512', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([ 0.6397,  0.5498,  0.5853,  0.5851,  0.4566], device='cuda:0')

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 512, 26, 26])
tensor([ 0.0574, -0.4729, -0.2064,  0.1496, -0.2337], device='cuda:0')

{'type': 'yolo', 'mask': '3,4,5', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 26, 26])
{'type': 'route', 'layers': '-4'}
route
torch.Size([1, 2028, 85])
tensor([ 0.4299,  0.3621,  0.5092,  0.5042,  0.2230], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 26, 26])
tensor([-0.0496, -0.1351, -0.0545, -0.0426, -0.0193], device='cuda:0')

{'type': 'upsample', 'stride': '2'}
upsample
torch.Size([1, 128, 26, 26])
tensor([-0.0496, -0.0710, -0.1138, -0.1150, -0.0747], device='cuda:0')

{'type': 'route', 'layers': '-1, 36'}
route
torch.Size([1, 128, 52, 52])
tensor([-0.0496, -0.0710, -0.1138, -0.1150, -0.0747], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 384, 52, 52])
tensor([ 2.0454,  1.2711,  1.1086,  0.8861,  0.2810], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.0140,  0.1139,  0.2230,  0.5950, -0.0201], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 1.4458,  1.3228,  1.6106,  0.6839,  0.9670], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([-0.1329, -0.0954, -0.0842, -0.0300, -0.0437], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'filters': '128', 'size': '1', 'stride': '1', 'pad': '1', 'activation': 'leaky'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.5276,  2.5411,  1.0610,  1.4222,  1.4939], device='cuda:0')

{'type': 'convolutional', 'batch_normalize': '1', 'size': '3', 'stride': '1', 'pad': '1', 'filters': '256', 'activation': 'leaky'}
convolutional
torch.Size([1, 128, 52, 52])
tensor([ 0.2639,  0.3999,  0.2070,  0.0122, -0.0060], device='cuda:0')

{'type': 'convolutional', 'size': '1', 'stride': '1', 'pad': '1', 'filters': '255', 'activation': 'linear'}
convolutional
torch.Size([1, 256, 52, 52])
tensor([ 0.2003, -0.4013, -0.0601, -0.0245, -0.1759], device='cuda:0')

{'type': 'yolo', 'mask': '0,1,2', 'anchors': '10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326', 'classes': '80', 'num': '9', 'jitter': '.3', 'ignore_thresh': '.5', 'truth_thresh': '1', 'random': '1'}
yolo
torch.Size([1, 255, 52, 52])
tensor([[ 3.1566e+02,  9.1526e+01,  1.1746e+02,  ...,  9.3698e-07,
          4.9341e-07,  3.4389e-06],
        [ 3.2258e+02,  9.1998e+01,  1.1508e+02,  ...,  3.2722e-06,
          1.6197e-06,  1.4967e-05],
        [ 3.1551e+02,  9.7279e+01,  1.2077e+02,  ...,  4.8007e-06,
          7.3352e-06,  2.5673e-05],
        ...,
        [ 1.1877e+02,  2.9209e+02,  1.1523e+02,  ...,  1.3559e-05,
          1.0537e-06,  5.8263e-07],
        [ 1.8574e+02,  1.8669e+02,  2.5434e+02,  ...,  6.8490e-08,
          2.2950e-06,  1.1222e-06],
        [ 1.8383e+02,  2.0695e+02,  2.6039e+02,  ...,  1.5702e-08,
          1.2096e-06,  6.7556e-07]], device='cuda:0')
wenyu@wenyu-pc:~/workspace/pytorch_workspace/yolov3$